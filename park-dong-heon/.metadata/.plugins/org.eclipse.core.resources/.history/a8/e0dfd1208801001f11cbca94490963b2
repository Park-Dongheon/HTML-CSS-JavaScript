package quiz;

import java.util.Random;
import java.util.Scanner;

//class PrimeNumber {
//	
//}

public class MatrixCalc {												// MatrixCalc라는 이름의 public 클래스를 정의, 접근 제어자가 public 이므로 다른 패키지에서 접근 가능 
	
	private int[][] matrix ;											// matrix 이름의 이차원 정수형 배열을 '선언', 여기서 private 접근 제어자는 해당 배열이 선언된 클래스 내부에서만 접근 가능,
																		// 아직 크기가 지정되지 않았으므로 배열에 데이터를 할당하거나 사용할 수 없음
	
	private void getMatrix() {											// getMatrix라는 이름의 private 메서드를 정의, 매개변수를 받지 않고(void) 아무것도 반환하지 않음
		Scanner sc = new Scanner(System.in);							// 표준 입력(System.in)에서 데이터를 읽기 위해 Scanner 객체를 생성하고 sc라는 변수에 할당, 
																		// Scanner는 Java에서 입력을 읽어오는 유틸리티 클래스, 표준 입력(Sysytem.in)은 콘솔 창에서 키보드로 입력한 데이터를 의미
		
		System.out.print("행을 입력하시요 : ");
		int n = sc.nextInt();											// Scanner 객체인 sc를 사용해 사용자로부터 정수형 데이터를 입력 받음,
																		// nextInt() 메서드는 Scanner 객체에서 입력데이터를 정수로 해석하고 그 값을 반환
																		// 입력 받은 정수값을 정수형 변수 n에 할당
		System.out.print("열을 입력하시요 : ");
		int m = sc.nextInt();											// 입력 받은 정수값을 정수형 변수 m에 할당
		
		
		matrix = new int[n][m];											// n행 m열인 이차원 정수형 배열을 '생성'하고, 변수 matrix에 할당
		
//		행렬 입력(무작위 random값(1~9) 입력)
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				matrix[i][j] = (int) (Math.random() * 9)+1;
			}
		}
		sc.close();	
	}
	
	public void work(boolean flag) { 
		if(flag) getMatrix();											// boolean 타입인 flag의 값이 true일 때, 해당 클래스의 내부에서만 동작 할 수 있는 == 접근 제어자가 private 
																		// getMatrix() 메소드를 호출한다 
		
		int n = matrix.length;											// 행의 개수 입력, 이차원 배열로 선언된 matrix의 첫 번째 차원의 크기가 행의 개수가 된다. 
		int m = matrix[0].length;										// 열의 개수 입력, matrix[0]은 이차원 배열 matrix 첫 번째 행,
																		// matrix[0].length - 각 행은 동일한 열의 개수를 갖기 때문에 첫 번째 행의 길이를 알면 모든 열의 길이를 알 수 있음
		
//		입력값 행렬 출력, n행 m열의 이차원 배열 matrix의 각 요소에 입력값을 출력 한다.
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				System.out.print(matrix[i][j] + " ");					// 이차원 배열의 각 요소를 줄바꿈 없이 출력
			}
			System.out.println();										// 각 행마다 열의 값이 출력된 후 다음 줄로 바꿈
		}
		System.out.println();
		
/*
		가로(열)의 합, 중첩 반복문 matrix의 각 행마다 열의 합을 계산·출력, n행 m열의 2차원 배열, 각 요소는 정수형
		바깥쪽 반복문 for(int i=0; i < n; i++) 행을 순회, i변수는 현재 처리 중인 행의 인덱스
		안쪽 반복문 for(int j=0; j < m; j++) 해댕 행의 각 열을 순회, j변수는 열의 인덱스
 */
		for(int i = 0; i < n; i++) {
			int sum = 0;												// 각 행 마다 sum 변수의 값을 0으로 초기화
			for(int j = 0; j < m; j++) {
				sum += matrix[i][j];									// 한 행의 합, sum 변수에 한 행의 각 요소를 누적 합
			}
			System.out.println(i+1 + "행의 열의 총합 : " + sum);			// 한 행의 합을 출력, 열의 인덱스 범위 m까지 반복 순회 후 출력 
		}
		
		System.out.println();
		
		
//		세로(행)의 합, 열의 변수 j가 인덱스 값(0~m-1)까지의 값이 
		for(int j = 0; j < m ; j++) {
			int sum = 0;
			for(int i = 0; i < n ; i++) {
				sum += matrix[i][j];
			}
			System.out.println(j+1 + "열의 행의 총합 : " + sum);
		}
	}
}
